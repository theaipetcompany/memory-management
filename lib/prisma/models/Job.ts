
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Job` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Job
 * 
 */
export type JobModel = runtime.Types.Result.DefaultSelection<Prisma.$JobPayload>

export type AggregateJob = {
  _count: JobCountAggregateOutputType | null
  _min: JobMinAggregateOutputType | null
  _max: JobMaxAggregateOutputType | null
}

export type JobMinAggregateOutputType = {
  id: string | null
  status: string | null
  openaiJobId: string | null
  createdAt: Date | null
}

export type JobMaxAggregateOutputType = {
  id: string | null
  status: string | null
  openaiJobId: string | null
  createdAt: Date | null
}

export type JobCountAggregateOutputType = {
  id: number
  status: number
  openaiJobId: number
  createdAt: number
  _all: number
}


export type JobMinAggregateInputType = {
  id?: true
  status?: true
  openaiJobId?: true
  createdAt?: true
}

export type JobMaxAggregateInputType = {
  id?: true
  status?: true
  openaiJobId?: true
  createdAt?: true
}

export type JobCountAggregateInputType = {
  id?: true
  status?: true
  openaiJobId?: true
  createdAt?: true
  _all?: true
}

export type JobAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Job to aggregate.
   */
  where?: Prisma.JobWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Jobs to fetch.
   */
  orderBy?: Prisma.JobOrderByWithRelationInput | Prisma.JobOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.JobWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Jobs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Jobs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Jobs
  **/
  _count?: true | JobCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: JobMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: JobMaxAggregateInputType
}

export type GetJobAggregateType<T extends JobAggregateArgs> = {
      [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateJob[P]>
    : Prisma.GetScalarType<T[P], AggregateJob[P]>
}




export type JobGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.JobWhereInput
  orderBy?: Prisma.JobOrderByWithAggregationInput | Prisma.JobOrderByWithAggregationInput[]
  by: Prisma.JobScalarFieldEnum[] | Prisma.JobScalarFieldEnum
  having?: Prisma.JobScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: JobCountAggregateInputType | true
  _min?: JobMinAggregateInputType
  _max?: JobMaxAggregateInputType
}

export type JobGroupByOutputType = {
  id: string
  status: string
  openaiJobId: string | null
  createdAt: Date
  _count: JobCountAggregateOutputType | null
  _min: JobMinAggregateOutputType | null
  _max: JobMaxAggregateOutputType | null
}

type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<JobGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], JobGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], JobGroupByOutputType[P]>
      }
    >
  >



export type JobWhereInput = {
  AND?: Prisma.JobWhereInput | Prisma.JobWhereInput[]
  OR?: Prisma.JobWhereInput[]
  NOT?: Prisma.JobWhereInput | Prisma.JobWhereInput[]
  id?: Prisma.StringFilter<"Job"> | string
  status?: Prisma.StringFilter<"Job"> | string
  openaiJobId?: Prisma.StringNullableFilter<"Job"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Job"> | Date | string
}

export type JobOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  openaiJobId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JobWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.JobWhereInput | Prisma.JobWhereInput[]
  OR?: Prisma.JobWhereInput[]
  NOT?: Prisma.JobWhereInput | Prisma.JobWhereInput[]
  status?: Prisma.StringFilter<"Job"> | string
  openaiJobId?: Prisma.StringNullableFilter<"Job"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Job"> | Date | string
}, "id">

export type JobOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  openaiJobId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.JobCountOrderByAggregateInput
  _max?: Prisma.JobMaxOrderByAggregateInput
  _min?: Prisma.JobMinOrderByAggregateInput
}

export type JobScalarWhereWithAggregatesInput = {
  AND?: Prisma.JobScalarWhereWithAggregatesInput | Prisma.JobScalarWhereWithAggregatesInput[]
  OR?: Prisma.JobScalarWhereWithAggregatesInput[]
  NOT?: Prisma.JobScalarWhereWithAggregatesInput | Prisma.JobScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Job"> | string
  status?: Prisma.StringWithAggregatesFilter<"Job"> | string
  openaiJobId?: Prisma.StringNullableWithAggregatesFilter<"Job"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Job"> | Date | string
}

export type JobCreateInput = {
  id?: string
  status?: string
  openaiJobId?: string | null
  createdAt?: Date | string
}

export type JobUncheckedCreateInput = {
  id?: string
  status?: string
  openaiJobId?: string | null
  createdAt?: Date | string
}

export type JobUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  openaiJobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  openaiJobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobCreateManyInput = {
  id?: string
  status?: string
  openaiJobId?: string | null
  createdAt?: Date | string
}

export type JobUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  openaiJobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  openaiJobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  openaiJobId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JobMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  openaiJobId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JobMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  openaiJobId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}



export type JobSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  openaiJobId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["job"]>

export type JobSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  openaiJobId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["job"]>

export type JobSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  openaiJobId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["job"]>

export type JobSelectScalar = {
  id?: boolean
  status?: boolean
  openaiJobId?: boolean
  createdAt?: boolean
}

export type JobOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "status" | "openaiJobId" | "createdAt", ExtArgs["result"]["job"]>

export type $JobPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Job"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    status: string
    openaiJobId: string | null
    createdAt: Date
  }, ExtArgs["result"]["job"]>
  composites: {}
}

export type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$JobPayload, S>

export type JobCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: JobCountAggregateInputType | true
  }

export interface JobDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
  /**
   * Find zero or one Job that matches the filter.
   * @param {JobFindUniqueArgs} args - Arguments to find a Job
   * @example
   * // Get one Job
   * const job = await prisma.job.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends JobFindUniqueArgs>(args: Prisma.SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Job that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
   * @example
   * // Get one Job
   * const job = await prisma.job.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Job that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobFindFirstArgs} args - Arguments to find a Job
   * @example
   * // Get one Job
   * const job = await prisma.job.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends JobFindFirstArgs>(args?: Prisma.SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Job that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
   * @example
   * // Get one Job
   * const job = await prisma.job.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Jobs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Jobs
   * const jobs = await prisma.job.findMany()
   * 
   * // Get first 10 Jobs
   * const jobs = await prisma.job.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends JobFindManyArgs>(args?: Prisma.SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Job.
   * @param {JobCreateArgs} args - Arguments to create a Job.
   * @example
   * // Create one Job
   * const Job = await prisma.job.create({
   *   data: {
   *     // ... data to create a Job
   *   }
   * })
   * 
   */
  create<T extends JobCreateArgs>(args: Prisma.SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Jobs.
   * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
   * @example
   * // Create many Jobs
   * const job = await prisma.job.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends JobCreateManyArgs>(args?: Prisma.SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Jobs and returns the data saved in the database.
   * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
   * @example
   * // Create many Jobs
   * const job = await prisma.job.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Jobs and only return the `id`
   * const jobWithIdOnly = await prisma.job.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Job.
   * @param {JobDeleteArgs} args - Arguments to delete one Job.
   * @example
   * // Delete one Job
   * const Job = await prisma.job.delete({
   *   where: {
   *     // ... filter to delete one Job
   *   }
   * })
   * 
   */
  delete<T extends JobDeleteArgs>(args: Prisma.SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Job.
   * @param {JobUpdateArgs} args - Arguments to update one Job.
   * @example
   * // Update one Job
   * const job = await prisma.job.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends JobUpdateArgs>(args: Prisma.SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Jobs.
   * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
   * @example
   * // Delete a few Jobs
   * const { count } = await prisma.job.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends JobDeleteManyArgs>(args?: Prisma.SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Jobs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Jobs
   * const job = await prisma.job.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends JobUpdateManyArgs>(args: Prisma.SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Jobs and returns the data updated in the database.
   * @param {JobUpdateManyAndReturnArgs} args - Arguments to update many Jobs.
   * @example
   * // Update many Jobs
   * const job = await prisma.job.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Jobs and only return the `id`
   * const jobWithIdOnly = await prisma.job.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends JobUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, JobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Job.
   * @param {JobUpsertArgs} args - Arguments to update or create a Job.
   * @example
   * // Update or create a Job
   * const job = await prisma.job.upsert({
   *   create: {
   *     // ... data to create a Job
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Job we want to update
   *   }
   * })
   */
  upsert<T extends JobUpsertArgs>(args: Prisma.SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Jobs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobCountArgs} args - Arguments to filter Jobs to count.
   * @example
   * // Count the number of Jobs
   * const count = await prisma.job.count({
   *   where: {
   *     // ... the filter for the Jobs we want to count
   *   }
   * })
  **/
  count<T extends JobCountArgs>(
    args?: Prisma.Subset<T, JobCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], JobCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Job.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends JobAggregateArgs>(args: Prisma.Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

  /**
   * Group by Job.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends JobGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: JobGroupByArgs['orderBy'] }
      : { orderBy?: JobGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Job model
 */
readonly fields: JobFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Job.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__JobClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Job model
 */
export interface JobFieldRefs {
  readonly id: Prisma.FieldRef<"Job", 'String'>
  readonly status: Prisma.FieldRef<"Job", 'String'>
  readonly openaiJobId: Prisma.FieldRef<"Job", 'String'>
  readonly createdAt: Prisma.FieldRef<"Job", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Job findUnique
 */
export type JobFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * Filter, which Job to fetch.
   */
  where: Prisma.JobWhereUniqueInput
}

/**
 * Job findUniqueOrThrow
 */
export type JobFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * Filter, which Job to fetch.
   */
  where: Prisma.JobWhereUniqueInput
}

/**
 * Job findFirst
 */
export type JobFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * Filter, which Job to fetch.
   */
  where?: Prisma.JobWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Jobs to fetch.
   */
  orderBy?: Prisma.JobOrderByWithRelationInput | Prisma.JobOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Jobs.
   */
  cursor?: Prisma.JobWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Jobs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Jobs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Jobs.
   */
  distinct?: Prisma.JobScalarFieldEnum | Prisma.JobScalarFieldEnum[]
}

/**
 * Job findFirstOrThrow
 */
export type JobFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * Filter, which Job to fetch.
   */
  where?: Prisma.JobWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Jobs to fetch.
   */
  orderBy?: Prisma.JobOrderByWithRelationInput | Prisma.JobOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Jobs.
   */
  cursor?: Prisma.JobWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Jobs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Jobs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Jobs.
   */
  distinct?: Prisma.JobScalarFieldEnum | Prisma.JobScalarFieldEnum[]
}

/**
 * Job findMany
 */
export type JobFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * Filter, which Jobs to fetch.
   */
  where?: Prisma.JobWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Jobs to fetch.
   */
  orderBy?: Prisma.JobOrderByWithRelationInput | Prisma.JobOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Jobs.
   */
  cursor?: Prisma.JobWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Jobs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Jobs.
   */
  skip?: number
  distinct?: Prisma.JobScalarFieldEnum | Prisma.JobScalarFieldEnum[]
}

/**
 * Job create
 */
export type JobCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * The data needed to create a Job.
   */
  data?: Prisma.XOR<Prisma.JobCreateInput, Prisma.JobUncheckedCreateInput>
}

/**
 * Job createMany
 */
export type JobCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Jobs.
   */
  data: Prisma.JobCreateManyInput | Prisma.JobCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Job createManyAndReturn
 */
export type JobCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * The data used to create many Jobs.
   */
  data: Prisma.JobCreateManyInput | Prisma.JobCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Job update
 */
export type JobUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * The data needed to update a Job.
   */
  data: Prisma.XOR<Prisma.JobUpdateInput, Prisma.JobUncheckedUpdateInput>
  /**
   * Choose, which Job to update.
   */
  where: Prisma.JobWhereUniqueInput
}

/**
 * Job updateMany
 */
export type JobUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Jobs.
   */
  data: Prisma.XOR<Prisma.JobUpdateManyMutationInput, Prisma.JobUncheckedUpdateManyInput>
  /**
   * Filter which Jobs to update
   */
  where?: Prisma.JobWhereInput
  /**
   * Limit how many Jobs to update.
   */
  limit?: number
}

/**
 * Job updateManyAndReturn
 */
export type JobUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * The data used to update Jobs.
   */
  data: Prisma.XOR<Prisma.JobUpdateManyMutationInput, Prisma.JobUncheckedUpdateManyInput>
  /**
   * Filter which Jobs to update
   */
  where?: Prisma.JobWhereInput
  /**
   * Limit how many Jobs to update.
   */
  limit?: number
}

/**
 * Job upsert
 */
export type JobUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * The filter to search for the Job to update in case it exists.
   */
  where: Prisma.JobWhereUniqueInput
  /**
   * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
   */
  create: Prisma.XOR<Prisma.JobCreateInput, Prisma.JobUncheckedCreateInput>
  /**
   * In case the Job was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.JobUpdateInput, Prisma.JobUncheckedUpdateInput>
}

/**
 * Job delete
 */
export type JobDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
  /**
   * Filter which Job to delete.
   */
  where: Prisma.JobWhereUniqueInput
}

/**
 * Job deleteMany
 */
export type JobDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Jobs to delete
   */
  where?: Prisma.JobWhereInput
  /**
   * Limit how many Jobs to delete.
   */
  limit?: number
}

/**
 * Job without action
 */
export type JobDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Job
   */
  select?: Prisma.JobSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Job
   */
  omit?: Prisma.JobOmit<ExtArgs> | null
}
